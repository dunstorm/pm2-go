// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: process.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessManagerClient is the client API for ProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessManagerClient interface {
	AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*Process, error)
	StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*Process, error)
	StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessResponse, error)
	FindProcess(ctx context.Context, in *FindProcessRequest, opts ...grpc.CallOption) (*Process, error)
	DeleteProcess(ctx context.Context, in *DeleteProcessRequest, opts ...grpc.CallOption) (*DeleteProcessResponse, error)
	ListProcess(ctx context.Context, in *ListProcessRequest, opts ...grpc.CallOption) (*ListProcessResponse, error)
	SpawnProcess(ctx context.Context, in *SpawnProcessRequest, opts ...grpc.CallOption) (*SpawnProcessResponse, error)
}

type processManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessManagerClient(cc grpc.ClientConnInterface) ProcessManagerClient {
	return &processManagerClient{cc}
}

func (c *processManagerClient) AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/AddProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/StartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessResponse, error) {
	out := new(StopProcessResponse)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) FindProcess(ctx context.Context, in *FindProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/FindProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) DeleteProcess(ctx context.Context, in *DeleteProcessRequest, opts ...grpc.CallOption) (*DeleteProcessResponse, error) {
	out := new(DeleteProcessResponse)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/DeleteProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) ListProcess(ctx context.Context, in *ListProcessRequest, opts ...grpc.CallOption) (*ListProcessResponse, error) {
	out := new(ListProcessResponse)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/ListProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) SpawnProcess(ctx context.Context, in *SpawnProcessRequest, opts ...grpc.CallOption) (*SpawnProcessResponse, error) {
	out := new(SpawnProcessResponse)
	err := c.cc.Invoke(ctx, "/proto.ProcessManager/SpawnProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessManagerServer is the server API for ProcessManager service.
// All implementations must embed UnimplementedProcessManagerServer
// for forward compatibility
type ProcessManagerServer interface {
	AddProcess(context.Context, *AddProcessRequest) (*Process, error)
	StartProcess(context.Context, *StartProcessRequest) (*Process, error)
	StopProcess(context.Context, *StopProcessRequest) (*StopProcessResponse, error)
	FindProcess(context.Context, *FindProcessRequest) (*Process, error)
	DeleteProcess(context.Context, *DeleteProcessRequest) (*DeleteProcessResponse, error)
	ListProcess(context.Context, *ListProcessRequest) (*ListProcessResponse, error)
	SpawnProcess(context.Context, *SpawnProcessRequest) (*SpawnProcessResponse, error)
	mustEmbedUnimplementedProcessManagerServer()
}

// UnimplementedProcessManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProcessManagerServer struct {
}

func (UnimplementedProcessManagerServer) AddProcess(context.Context, *AddProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcess not implemented")
}
func (UnimplementedProcessManagerServer) StartProcess(context.Context, *StartProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (UnimplementedProcessManagerServer) StopProcess(context.Context, *StopProcessRequest) (*StopProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (UnimplementedProcessManagerServer) FindProcess(context.Context, *FindProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProcess not implemented")
}
func (UnimplementedProcessManagerServer) DeleteProcess(context.Context, *DeleteProcessRequest) (*DeleteProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcess not implemented")
}
func (UnimplementedProcessManagerServer) ListProcess(context.Context, *ListProcessRequest) (*ListProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcess not implemented")
}
func (UnimplementedProcessManagerServer) SpawnProcess(context.Context, *SpawnProcessRequest) (*SpawnProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnProcess not implemented")
}
func (UnimplementedProcessManagerServer) mustEmbedUnimplementedProcessManagerServer() {}

// UnsafeProcessManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessManagerServer will
// result in compilation errors.
type UnsafeProcessManagerServer interface {
	mustEmbedUnimplementedProcessManagerServer()
}

func RegisterProcessManagerServer(s grpc.ServiceRegistrar, srv ProcessManagerServer) {
	s.RegisterService(&ProcessManager_ServiceDesc, srv)
}

func _ProcessManager_AddProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).AddProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/AddProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).AddProcess(ctx, req.(*AddProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/StartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).StartProcess(ctx, req.(*StartProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).StopProcess(ctx, req.(*StopProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_FindProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).FindProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/FindProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).FindProcess(ctx, req.(*FindProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_DeleteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).DeleteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/DeleteProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).DeleteProcess(ctx, req.(*DeleteProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_ListProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).ListProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/ListProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).ListProcess(ctx, req.(*ListProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_SpawnProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).SpawnProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProcessManager/SpawnProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).SpawnProcess(ctx, req.(*SpawnProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessManager_ServiceDesc is the grpc.ServiceDesc for ProcessManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProcessManager",
	HandlerType: (*ProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProcess",
			Handler:    _ProcessManager_AddProcess_Handler,
		},
		{
			MethodName: "StartProcess",
			Handler:    _ProcessManager_StartProcess_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _ProcessManager_StopProcess_Handler,
		},
		{
			MethodName: "FindProcess",
			Handler:    _ProcessManager_FindProcess_Handler,
		},
		{
			MethodName: "DeleteProcess",
			Handler:    _ProcessManager_DeleteProcess_Handler,
		},
		{
			MethodName: "ListProcess",
			Handler:    _ProcessManager_ListProcess_Handler,
		},
		{
			MethodName: "SpawnProcess",
			Handler:    _ProcessManager_SpawnProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "process.proto",
}
